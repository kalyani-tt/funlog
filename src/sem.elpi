accumulate "syntax".

type step tm -> tm -> o.
step (uni A C) (uni B C) :-
    step A B.
step (lam F) (lam F).
step (app F A) (app G A) :-
    step F G.
step (exi A C) (exi B C) :-
    step A B.
step (gen A C) (gen B D) :-
    step A B,
    step C D.
step (spr X Z) (spr Y Z) :-
    step X Y.
step (if X A B) (if Y A B) :-
    step X Y.
step (neg A) (neg B) :-
    step A B.
step (eql A C) (eql B D) :-
    step A B,
    step C D.
step (rfl A C) (rfl B D) :-
    step A B,
    step C D.
step (neq A C) (neq B D) :-
    step A B,
    step C D.
step (nrf A C) (nrf B D) :-
    step A B,
    step C D.
step (app (lam F) X) (F X).
step (pr1 (gen X Y)) X.
step (pr2 (gen X Y)) (Y X).
step (if tt X Y) X.
step (if ff X Y) Y.

type eval tm -> tm -> o.
eval X X.
eval X Z :-
    step X Y,
    eval Y Z.