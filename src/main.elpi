kind tm type.

type typ tm.
type uni tm -> (tm -> tm) -> tm.
type lam (tm -> tm) -> tm.
type app tm -> tm -> tm.
type exi tm -> (tm -> tm) -> tm.
type gen tm -> tm -> tm.
type pr1 tm -> tm.
type pr2 tm -> tm.
type two tm.
type tt tm.
type ff tm.
type if tm -> tm -> tm.
type neg tm -> tm.
type eql tm -> tm -> tm.
type rfl tm -> tm -> tm.
type neq tm -> tm -> tm.
type nrf tm -> tm -> tm.

type conv tm -> tm -> o.
conv tt tt.
conv ff ff.
conv two two.
conv typ typ.
conv (app F X) R :-
    conv F (lam B),
    conv X Y,
    conv (B Y) R.

type synth tm -> tm -> o.
synth A X :-
    conv A B,
    synth B X.
synth (uni A B) (lam F) :-
    pi x\ synth A x => synth (B x) (F x).
synth (exi A B) (gen X Y) :-
    synth A X,
    synth (B X) Y.
synth two tt.
synth two ff.
synth (eql X Y) (rfl X Y) :-
    conv X Y; conv Y X.
synth (neq X Y) (nrf X Y) :-
    not (conv X Y; conv Y X).
synth (if C A B) (if C X Y) :-
    synth A X,
    synth B Y.